#! /usr/bin/env python3
from __future__ import annotations

import argparse
import collections.abc
import logging
import pathlib
import re
import shutil
import string
import subprocess
import sys
from typing import TYPE_CHECKING

if sys.version_info > (3, 11):
    from typing import NoReturn
elif TYPE_CHECKING:
    from typing_extensions import NoReturn

XDG_CONFIG_HOME = pathlib.Path.home() / ".config"
THIS_DIR = pathlib.Path(__file__).parent

sys.path.append(str(THIS_DIR))
from installer import STAGE_REGISTRY, Config, stage  # noqa: E402
from installer.utils import (  # noqa: E402
    DotfileManager,
    colored_diff,
    configure_logging,
    confirm,
    prompt,
    symlink_exists,
)

_logger = logging.getLogger("install")


parser = argparse.ArgumentParser(
    prog="dotfiles-installer", description="Helper script to install the dotfiles in this repository"
)
parser.add_argument("--verbose", "-v", action="store_true", help="Enable verbose output")
parser.add_argument("--email", help="E-Mail address to use for configuration")
parser.add_argument(
    "--confirm-all-stages",
    "-y",
    default=False,
    action="store_true",
    help="Confirm execution of all stages",
)
skip_stages_group = parser.add_argument_group(
    "Skip stages", description="Arguments to skip individual stages of the installation"
)

only_stages_group = parser.add_argument_group(
    "Only run stages", description="Arguments to only run individual stages of the installation"
)


@stage("Create .gitconfig")
def create_gitconfig(cfg: Config) -> None:
    gitconfig_path = pathlib.Path.home() / ".gitconfig"

    if cfg.email is None:
        cfg.email = prompt("Enter E-Mail address:")

    new_gitconfig_content = string.Template((THIS_DIR / "git" / "config.template").read_text()).safe_substitute(
        full_name=cfg.full_name, email=cfg.email, signingkey=str(pathlib.Path.home() / ".ssh" / "id_ed25519.pub")
    )

    existing_content = gitconfig_path.read_text() if gitconfig_path.exists() else ""

    if existing_content == new_gitconfig_content:
        _logger.info(".gitconfig is up to date")
        return

    _logger.info(".gitconfig diff:")
    for line in colored_diff(existing_content, new_gitconfig_content):
        _logger.info(line.rstrip())

    if not cfg.confirm_all_stages and not confirm("Confirm new .gitconfig content?", default="y"):
        return
    DotfileManager(cfg.timestamp, _logger).safe_write(new_gitconfig_content, gitconfig_path)


@stage(
    "Link .gitignore",
    predicate=lambda: not symlink_exists(pathlib.Path.home() / ".gitignore", THIS_DIR / "git" / "ignore"),
)
def link_gitignore(cfg: Config) -> None:
    DotfileManager(cfg.timestamp, _logger).safe_symlink(THIS_DIR / "git" / "ignore", pathlib.Path.home() / ".gitignore")


@stage(
    "Link .tmux.conf",
    predicate=lambda: not symlink_exists(pathlib.Path.home() / ".tmux.conf", THIS_DIR / "tmux" / "tmux.conf"),
)
def link_tmux_conf(cfg: Config) -> None:
    DotfileManager(cfg.timestamp, _logger).safe_symlink(
        THIS_DIR / "tmux" / "tmux.conf", pathlib.Path.home() / ".tmux.conf"
    )


@stage(
    "Link .pythonstartup",
    predicate=lambda: not symlink_exists(pathlib.Path.home() / ".pythonstartup", THIS_DIR / "python" / "startup"),
)
def link_pythonstartup(cfg: Config) -> None:
    DotfileManager(cfg.timestamp, _logger).safe_symlink(
        THIS_DIR / "python" / "startup", pathlib.Path.home() / ".pythonstartup"
    )


@stage(
    "Install oh-my-zsh",
    interactive_confirm=True,
    predicate=lambda: not (pathlib.Path.home() / ".oh-my-zsh").exists(),
    abort_on_error=False,
)
def install_omz(cfg: Config) -> None:
    subprocess.run(  # noqa: S602
        '/usr/bin/sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"',  # noqa: S607
        stdin=subprocess.DEVNULL,
        check=True,
        shell=True,
    )


@stage(
    "Install pyenv",
    interactive_confirm=True,
    predicate=lambda: not (pathlib.Path.home() / ".pyenv").exists(),
)
def install_pyenv(cfg: Config) -> None:
    subprocess.run("curl https://pyenv.run | bash", shell=True, check=True)  # noqa: S602, S607


@stage(
    "Install fzf",
    interactive_confirm=True,
    predicate=lambda: not shutil.which("fzf") and not (pathlib.Path.home() / ".fzf").exists(),
)
def install_fzf(cfg: Config) -> None:
    fzf_dir = pathlib.Path.home() / ".fzf"
    subprocess.run(  # noqa: S603
        [
            "/usr/bin/git",
            "clone",
            "--depth",
            "1",
            "https://github.com/junegunn/fzf.git",
            str(fzf_dir),
        ],
        check=True,
    )
    subprocess.run([str(fzf_dir / "install")], check=True)  # noqa: S603


@stage("Install nvm", interactive_confirm=True, predicate=lambda: not (pathlib.Path.home() / ".nvm").exists())
def install_nvm(cfg: Config) -> None:
    proc = subprocess.run(  # noqa: S603
        [
            "/usr/bin/curl",
            "-L",
            "-s",
            "-o",
            "/dev/null",
            "-w",
            "%{url_effective}",
            "https://github.com/nvm-sh/nvm/releases/latest",
        ],
        check=True,
        stdout=subprocess.PIPE,
        encoding="UTF-8",
    )

    m = re.match(r"https://github\.com/nvm-sh/nvm/releases/tag/(?P<tag>v\d+\.\d+(?:\.\d+))", proc.stdout)
    if not m:
        raise RuntimeError(f"Redirected URL {proc.stdout} does not match the expected pattern")

    subprocess.run(  # noqa: S602
        f"curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/{m.group('tag')}/install.sh | bash",
        shell=True,
        check=True,
    )


@stage(
    "Link neovim config",
    interactive_confirm=True,
    predicate=lambda: not symlink_exists(XDG_CONFIG_HOME / "nvim", THIS_DIR / "nvim"),
)
def link_nvim_config(cfg: Config) -> None:
    DotfileManager(cfg.timestamp, _logger).safe_symlink(THIS_DIR / "nvim", XDG_CONFIG_HOME)


def validate_vscode_extension_names(extensions: collections.abc.Iterable[str]) -> None:
    """Validate that VSCode extension names contain two elements, publisher and extension, separated by a dot.
    Each element must only contain characters, numbers, dashes and underscores.
    """
    for extension in extensions:
        if not re.match(r"^[\w\d_-]+\.[\w\d_-]+$", extension):
            raise ValueError(f"Invalid extension name: {extension}")


@stage("Install VSCode extensions", interactive_confirm=True, abort_on_error=False)
def install_vscode_extensions(cfg: Config) -> None:
    code_cmd = shutil.which("code")
    if not code_cmd:
        _logger.error("Executable 'code' is not visible in $PATH")
        return
    proc = subprocess.run(  # noqa: S603
        [code_cmd, "--list-extensions"],
        stdout=subprocess.PIPE,
        encoding="UTF-8",
        check=True,
    )
    available_extensions = set(proc.stdout.splitlines())
    validate_vscode_extension_names(available_extensions)

    required_extensions = set((THIS_DIR / "vscode" / "vscode-extensions.txt").read_text().splitlines())
    validate_vscode_extension_names(required_extensions)
    extensions_to_install = required_extensions - available_extensions

    if not extensions_to_install:
        _logger.info("No extensions to install")
        return

    args: list[str] = []
    for extension in extensions_to_install:
        args.append("--install-extension")
        args.append(extension)
    try:
        subprocess.run([code_cmd, *args], check=True)  # noqa: S603
    except:
        _logger.error("Error installing VSCode extensions")
        raise


@stage(
    "Link .zshrc",
    predicate=lambda: not symlink_exists(pathlib.Path.home() / ".zshrc", THIS_DIR / "zsh" / ".zshrc"),
)
def link_zshrc(cfg: Config) -> None:
    DotfileManager(cfg.timestamp, _logger).safe_symlink(THIS_DIR / "zsh" / ".zshrc", pathlib.Path.home())
    if cfg.platform == "Darwin":
        DotfileManager(cfg.timestamp, _logger).safe_symlink(THIS_DIR / "zsh" / ".zshrc.macos", pathlib.Path.home())


def add_stage_cli_arguments() -> None:
    for _stage in STAGE_REGISTRY:
        flag_name = _stage.flag_name
        name = _stage.name
        skip_stages_group.add_argument(
            f"--no-{flag_name}",
            action="append_const",
            dest="skipped_stages",
            const=flag_name,
            help=f"Skip the stage '{name}'",
        )
        only_stages_group.add_argument(
            f"--only-{flag_name}",
            action="append_const",
            dest="only_stages",
            const=flag_name,
            help=f"Only run the stage '{name}'",
        )


def main() -> NoReturn:
    add_stage_cli_arguments()
    namespace = parser.parse_args()
    configure_logging(_logger, namespace.verbose)

    try:
        cfg = Config.from_env(**vars(namespace))
    except Exception as exc:
        parser.exit(status=1, message=f"Error creating configuration: {exc}")

    try:
        create_gitconfig(cfg)
        link_gitignore(cfg)
        link_tmux_conf(cfg)
        link_pythonstartup(cfg)
        install_omz(cfg)
        install_fzf(cfg)
        install_pyenv(cfg)
        install_vscode_extensions(cfg)
        link_zshrc(cfg)
        install_nvm(cfg)
        link_nvim_config(cfg)
    except KeyboardInterrupt:
        parser.exit(status=2, message="\nAborted!\n")

    sys.exit(0)


if __name__ == "__main__":
    main()
