#! /usr/bin/env python3
from __future__ import annotations

import argparse
import collections.abc
import dataclasses
import datetime
import functools
import getpass
import pathlib
import platform
import pwd
import shutil
import string
import subprocess
import sys
import re
from typing import Any, Literal, TYPE_CHECKING

if sys.version_info > (3, 11):
    from typing import Self, NoReturn
else:
    if TYPE_CHECKING:
        from typing_extensions import Self, NoReturn


THIS_DIR = pathlib.Path(__file__).parent
zshrc = pathlib.Path.home() / ".zshrc"


parser = argparse.ArgumentParser(
    prog="dotfiles-installer", description="Helper script to install the dotfiles in this repository"
)
parser.add_argument("--email", help="E-Mail address to use for configuration")
skip_stages_group = parser.add_argument_group(
    "Skip stages", description="Arguments to skip individual stages of the installation"
)


def input_with_default(_prompt: str, default: str | None) -> str:
    """Prompt for a user input and return a default value on empty input

    :param _prompt: Prompt to write to stdout
    :param default: Default value
    :return: User input or default value
    """
    resp = input(_prompt + " ")
    if default and not resp:
        resp = default
    return resp


def confirm(prompt_: str, default: Literal["y", "n"] | None = None) -> bool:
    if default == "y":
        options = "(Y/n)"
    elif default == "n":
        options = "(y/N)"
    elif default is None:
        options = "(y/n)"

    resp = input_with_default(f"{prompt_} {options}", default)
    if resp.upper() == "Y":
        return True
    elif resp.upper() == "N":
        return False
    else:
        if resp.upper():
            print(f"Invalid input '{resp}'")
        return confirm(prompt_, default)


def prompt(
    prompt_: str,
    default: str | None = None,
    confirm_value: bool = True,
    validator: collections.abc.Callable[[str], bool] | None = None,
) -> str:
    input_prompt = f"{prompt_} ({default})" if default is not None else prompt_

    resp = input_with_default(input_prompt, default)
    if resp == default:
        # No need to validate and confirm if we use the default
        return resp

    if validator is not None and not validator(resp):
        print(f"Invalid value {resp}")
        return prompt(prompt_, default, confirm_value, validator)

    if confirm_value and not confirm(f"Use '{resp}'?", default="y"):
        return prompt(prompt_, default=default, confirm_value=confirm_value, validator=validator)
    return resp


def stage(
    name: str,
    confirm_before_run: bool,
    predicate: collections.abc.Callable[[], bool] | None = None,
    abort_on_error: bool = True,
) -> collections.abc.Callable[..., collections.abc.Callable[[Config], None]]:
    def dec(func: collections.abc.Callable[[Config], None]) -> collections.abc.Callable[[Config], Any]:
        flag_name = name.lower().replace(" ", "-")
        parser.add_argument(
            f"--no-{flag_name}",
            action="append_const",
            dest="skipped_stages",
            const=flag_name,
            help=f"Skip the stage '{name}'",
        )

        def wrapper(cfg: Config) -> None:
            if flag_name in cfg.skipped_stages:
                return
            if predicate is not None and not predicate():
                print(f"Running '{name}' is not required, skipped")
                return
            if confirm_before_run and not confirm(f"{name}?", default="y"):
                return

            try:
                func(cfg)
            except Exception as exc:
                error_msg = f"Error during '{name}': {exc}"
                if abort_on_error:
                    parser.exit(status=1, message=error_msg)
                else:
                    print(error_msg)

        return wrapper

    return dec


@dataclasses.dataclass
class Config:
    username: str
    full_name: str
    email: str
    platform: Literal["Linux", "Darwin", "Java", "Windows"] = dataclasses.field(default_factory=platform.system)
    timestamp: str = dataclasses.field(default_factory=lambda: datetime.datetime.now().strftime("%Y%m%d-%H%M%S"))
    skipped_stages: list[str] = dataclasses.field(default_factory=list)

    @classmethod
    def from_env(cls, email: str | None, skipped_stages: list[str], **kwargs: Any) -> Self:
        username = getpass.getuser()
        email = email or prompt("Default E-Mail address?")
        skipped_stages = skipped_stages
        return cls(username=username, full_name=pwd.getpwnam(username).pw_name, email=email)


def backup_if_file_exists(path: pathlib.Path, cfg: Config) -> None | pathlib.Path:
    """Backup a file if it exists. If it is only a symlink remove it"""
    if path.is_symlink():
        print(f"Remove symlink of {path} to {path.resolve()}")
        path.unlink()
        return

    if path.exists():
        backup_path = path / f"{path.name}.pre-dotfiles-installer-{cfg.timestamp}"
        print(f"Moving existing {path.name} file to {backup_path}")
        shutil.move(path, backup_path)
        return backup_path


def check_if_files_differ(source: pathlib.Path, destination: pathlib.Path, cfg: Config, backup: bool = False) -> bool:
    """Check if the content of two files differs

    :param source: File to be used as the new base
    :param destination: File to check against
    :param cfg: Installer config
    :param backup: Whether to directly move the file to a backup location if content differs, defaults to False
    :return: Whether the file differs
    """
    return check_if_file_differs_from_text(source.read_text(), destination, cfg, backup)


def check_if_file_differs_from_text(text: str, destination: pathlib.Path, cfg: Config, backup: bool = False) -> bool:
    """Check if the content of a file differs from a text

    :param text: Text to check the file content against
    :param destination: File to check against
    :param cfg: Installer config
    :param backup: Whether to directly move the file to a backup location if content differs, defaults to False
    :return: Whether the file differs
    """
    if not destination.is_file():
        return False
    changed = destination.read_text() == text
    if changed and backup:
        backup_if_file_exists(destination, cfg)
    return changed


def safe_symlink(source: pathlib.Path, destination: pathlib.Path, cfg: Config) -> None:
    if destination.is_dir():
        destination = destination / source.name
    check_if_files_differ(source, destination, cfg, backup=True)
    destination.symlink_to(source)


@stage("Configure Git", confirm_before_run=False)
def configure_git(cfg: Config) -> None:

    print("Install .gitignore")
    safe_symlink(THIS_DIR / ".gitignore", pathlib.Path.home(), cfg)

    git_email = prompt("E-Mail address for .gitconfig:", default=cfg.email)
    gitconfig_template = string.Template((THIS_DIR / ".gitconfig").read_text())
    new_gitconfig = gitconfig_template.safe_substitute(full_name=cfg.full_name, email=git_email)
    user_gitconfig = pathlib.Path.home() / ".gitconfig"
    check_if_file_differs_from_text(new_gitconfig, user_gitconfig, cfg, backup=True)


@stage("Configure tmux", confirm_before_run=False)
def configure_tmux(cfg: Config) -> None:
    safe_symlink(THIS_DIR / ".tmux.conf", pathlib.Path.home(), cfg)


@stage("Configure .pythonstartup", confirm_before_run=False)
def configure_pythonstartup(cfg: Config) -> None:
    safe_symlink(THIS_DIR / ".pythonstartup", pathlib.Path.home(), cfg)


def cmd_missing(cmd: str) -> bool:
    return subprocess.run(["which", cmd], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode != 0


@stage("Install oh-my-zsh", confirm_before_run=True, predicate=functools.partial(cmd_missing, "omz"))
def install_omz(cfg: Config) -> None:
    subprocess.run(
        'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"',
        stdin=subprocess.DEVNULL,
        check=True,
        shell=True,
    )


@stage("Install pyenv", confirm_before_run=True, predicate=functools.partial(cmd_missing, "pyenv"))
def install_pyenv(cfg: Config) -> None:
    subprocess.run("curl https://pyenv.run | bash", shell=True, check=True)


@stage("Install fzf", confirm_before_run=True)
def install_fzf(cfg: Config) -> None:
    subprocess.run(
        ["git", "clone", "--depth", "1", "https://github.com/junegunn/fzf.git", str(pathlib.Path.home() / ".fzf")],
        check=True,
    )
    subprocess.run(["~/.fzf/install"], shell=True, check=True)


@stage("Install VSCode extensions", confirm_before_run=True, abort_on_error=False)
def install_vscode_extensions(cfg: Config) -> None:
    for extension in ():
        try:
            subprocess.run(["code", "--install-extension", extension], check=True)
        except:
            print(f"Error installing VSCode extension '{extension}'")
            raise


@stage("Ensure .zshrc settings", confirm_before_run=True, abort_on_error=False)
def ensure_zshrc_settings(cfg: Config):
    backup_path = backup_if_file_exists(zshrc, cfg)
    if not backup_path:
        print(f"No exising {zshrc}, cannot ensure settings")
        return
    content = backup_path.read_text()

    print("Set ZSH_THEME")
    content = re.sub(r"ZSH_THEME=.*\n", 'ZSH_THEME="cypher"\n', content)

    print("Set PYTHONSTARTUP")
    pythonstartup_var_line = 'PYTHONSTARTUP="$HOME/.pythonstartup"\n'
    if "PYTHONSTARTUP=" in content:
        content = re.sub(r"PYTHONSTARTUP=.*\n", pythonstartup_var_line, content)
    else:
        content += "# Set PYTHONSTARTUP variable to load a script before starting an interactive shell"
        content += pythonstartup_var_line


def main() -> NoReturn:
    namespace = parser.parse_args()
    try:
        cfg = Config.from_env(**vars(namespace))
    except Exception as exc:
        parser.exit(status=1, message=f"Error creating configuration: {exc}")

    configure_git(cfg)
    configure_tmux(cfg)
    configure_pythonstartup(cfg)
    install_omz(cfg)
    install_fzf(cfg)
    install_pyenv(cfg)
    install_vscode_extensions(cfg)

    sys.exit(0)


if __name__ == "__main__":
    main()
