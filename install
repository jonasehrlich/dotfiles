#! /usr/bin/env python3
from __future__ import annotations

import argparse
import collections.abc
import dataclasses
import datetime
import functools
import getpass
import logging
import pathlib
import platform
import pwd
import string
import subprocess
import contextlib
import sys
from typing import TYPE_CHECKING, Any, Literal, Generator

if sys.version_info > (3, 11):
    from typing import NoReturn, Self
else:
    if TYPE_CHECKING:
        from typing_extensions import NoReturn, Self

_logger = logging.getLogger("install")

THIS_DIR = pathlib.Path(__file__).parent
zshrc = pathlib.Path.home() / ".zshrc"


parser = argparse.ArgumentParser(
    prog="dotfiles-installer", description="Helper script to install the dotfiles in this repository"
)
parser.add_argument("--verbose", "-v", action="store_true", help="Enable verbose output")
parser.add_argument("--email", help="E-Mail address to use for configuration")
skip_stages_group = parser.add_argument_group(
    "Skip stages", description="Arguments to skip individual stages of the installation"
)


def configure_logging(verbose: bool) -> None:
    _logger.setLevel(logging.DEBUG if verbose else logging.INFO)

    stdout_handler = logging.StreamHandler(sys.stdout)
    stdout_handler.addFilter(lambda record: record.levelno < logging.WARNING)
    stdout_handler.setFormatter(logging.Formatter("%(message)s"))

    stderr_handler = logging.StreamHandler()
    stderr_handler.setLevel(logging.WARNING)
    stderr_handler.setFormatter(logging.Formatter("%(levelname)s: %(message)s"))

    _logger.addHandler(stdout_handler)
    _logger.addHandler(stderr_handler)


@contextlib.contextmanager
def indent_logger(indent: str = "  ") -> Generator[None, Any, None]:
    for handler in _logger.handlers:
        if handler.formatter and handler.formatter._fmt:
            handler.setFormatter(logging.Formatter(indent + handler.formatter._fmt))
    try:
        yield
    finally:
        for handler in _logger.handlers:
            if handler.formatter and handler.formatter._fmt:
                handler.setFormatter(logging.Formatter(handler.formatter._fmt[len(indent) :]))


def input_with_default(_prompt: str, default: str | None) -> str:
    """Prompt for a user input and return a default value on empty input

    :param _prompt: Prompt to write to stdout
    :param default: Default value
    :return: User input or default value
    """
    resp = input(_prompt + " ")
    if default and not resp:
        resp = default
    return resp


def confirm(prompt_: str, default: Literal["y", "n"] | None = None) -> bool:
    if default == "y":
        options = "(Y/n)"
    elif default == "n":
        options = "(y/N)"
    elif default is None:
        options = "(y/n)"

    resp = input_with_default(f"{prompt_} {options}", default)
    if resp.upper() == "Y":
        return True
    elif resp.upper() == "N":
        return False
    else:
        if resp.upper():
            print(f"Invalid input: '{resp}'")
        return confirm(prompt_, default)


def prompt(
    prompt_: str,
    default: str | None = None,
    confirm_value: bool = True,
    validator: collections.abc.Callable[[str], bool] | None = None,
) -> str:
    input_prompt = f"{prompt_} ({default})" if default is not None else prompt_

    resp = input_with_default(input_prompt, default)
    if resp == default:
        # No need to validate and confirm if we use the default
        return resp

    if validator is not None and not validator(resp):
        print(f"Invalid input: {resp}")
        return prompt(prompt_, default, confirm_value, validator)

    if confirm_value and not confirm(f"Use '{resp}'?", default="y"):
        return prompt(prompt_, default=default, confirm_value=confirm_value, validator=validator)
    return resp


def stage(
    name: str,
    confirm_before_run: bool,
    predicate: collections.abc.Callable[[], bool] | None = None,
    abort_on_error: bool = False,
) -> collections.abc.Callable[..., collections.abc.Callable[[Config], None]]:
    def dec(func: collections.abc.Callable[[Config], None]) -> collections.abc.Callable[[Config], Any]:
        flag_name = name.lower().replace(" ", "-").replace(".", "")
        skip_stages_group.add_argument(
            f"--no-{flag_name}",
            action="append_const",
            dest="skipped_stages",
            const=flag_name,
            help=f"Skip the stage '{name}'",
        )

        def wrapper(cfg: Config) -> None:
            if flag_name in cfg.skipped_stages:
                return

            if predicate is not None and not predicate():
                _logger.info(f"'{name}' is not required, skip")
                return
            if confirm_before_run and not confirm(f"{name}?", default="y"):
                return

            _logger.info(f"{name}...")
            try:
                with indent_logger():
                    func(cfg)
            except Exception as exc:
                error_msg = f"Error during '{name}': {exc}"
                if abort_on_error:
                    parser.exit(status=1, message=error_msg)
                else:
                    _logger.error(error_msg)
            else:
                _logger.info(f"{name} - done")

        return wrapper

    return dec


@dataclasses.dataclass
class Config:
    username: str
    full_name: str
    email: str
    platform: Literal["Linux", "Darwin", "Java", "Windows"] = dataclasses.field(default_factory=platform.system)
    skipped_stages: list[str] = dataclasses.field(default_factory=list)
    timestamp: datetime.datetime = dataclasses.field(default_factory=datetime.datetime.now)

    @classmethod
    def from_env(cls, email: str | None, skipped_stages: list[str], **kwargs: Any) -> Self:
        username = getpass.getuser()
        email = email or prompt("Default E-Mail address?")
        skipped_stages = skipped_stages
        return cls(username=username, full_name=pwd.getpwnam(username).pw_name, email=email)


class DotfileManager:
    def __init__(self, timestamp: datetime.datetime) -> None:
        self._timestamp = timestamp
        self._backup_suffix = f".pre-dotfiles-installer-{self._timestamp.strftime('%Y-%m-%d_%H-%M-%S')}"

    def _cleanup_destination_path(self, path: pathlib.Path) -> None:
        self._backup_file(path)
        self._cleanup_symlink(path)

    def _backup_file(self, path: pathlib.Path) -> pathlib.Path | None:
        if path.is_file():
            backup_path = path.parent / f"{path.name}.{self._backup_suffix}"
            _logger.info(f"Rename existing {path.name} file to {backup_path}")
            path.rename(backup_path)
            return backup_path

    def _cleanup_symlink(self, path: pathlib.Path) -> None:
        if path.is_symlink():
            _logger.info("Remove symlink of %s to %s", path, path.resolve())
            path.unlink()

    def _file_content_matches(self, text: str, destination: pathlib.Path) -> bool:
        if destination.is_file() and destination.read_text() == text:
            return True
        return False
    
    def safe_symlink(self, source: pathlib.Path, destination: pathlib.Path) -> None:
        """Create a symlink. If `destination` is an existing file, back it up. 
        If `destination` is a symlink, remove it first.

        :param source: Source file
        :param destination: Path to create the symlink in
        """
        if destination.is_dir():
            destination = destination / source.name

        self._cleanup_destination_path(destination)
        _logger.info("Create symlink from %s to %s", destination, source)
        destination.symlink_to(source)

    def safe_write(self, text: str, destination: pathlib.Path) -> None:
        """Write `text` to a file if it differs. If the file exists already back it up first

        :param text: Text to write to `destination`
        :param destination: Path of the file to write to
        """
        if self._file_content_matches(text, destination):
            _logger.info("%s is up-to-date", destination)
            return
        else:
            _logger.info("%s differs from desired content")

        self._cleanup_destination_path(destination)
        _logger.info("Write %s", destination)
        destination.write_text(text)


def file_is_not_symlinked(symlink: pathlib.Path, path: pathlib.Path) -> bool:
    return symlink.is_symlink() and symlink.resolve() != path.resolve()


def not_(func: collections.abc.Callable[[], bool]) -> bool:
    return not func()


@stage(
    "Configure .gitconfig",
    confirm_before_run=False,
)
def configure_gitconfig(cfg: Config) -> None:
    gitconfig_content = string.Template((THIS_DIR / ".gitconfig.template").read_text()).safe_substitute(
        full_name=cfg.full_name, email=cfg.email
    )
    DotfileManager(cfg.timestamp).safe_write(gitconfig_content, pathlib.Path.home() / ".gitconfig")


@stage(
    "Configure .gitignore",
    confirm_before_run=False,
    predicate=functools.partial(file_is_not_symlinked, pathlib.Path.home() / ".gitignore", THIS_DIR / ".gitignore"),
)
def configure_gitignore(cfg: Config) -> None:
    DotfileManager(cfg.timestamp).safe_symlink(THIS_DIR / ".gitignore", pathlib.Path.home())


@stage(
    "Configure tmux.conf",
    confirm_before_run=False,
    predicate=functools.partial(file_is_not_symlinked, pathlib.Path.home() / ".tmux.conf", THIS_DIR / ".tmux.conf"),
)
def configure_tmux(cfg: Config) -> None:
    DotfileManager(cfg.timestamp).safe_symlink(THIS_DIR / ".tmux.conf", pathlib.Path.home())


@stage(
    "Configure .pythonstartup",
    confirm_before_run=False,
    predicate=functools.partial(
        file_is_not_symlinked, pathlib.Path.home() / ".pythonstartup", THIS_DIR / ".pythonstartup"
    ),
)
def configure_pythonstartup(cfg: Config) -> None:
    DotfileManager(cfg.timestamp).safe_symlink(THIS_DIR / ".pythonstartup", pathlib.Path.home())


@stage(
    "Install oh-my-zsh",
    confirm_before_run=True,
    predicate=functools.partial(not_, (pathlib.Path.home() / ".oh-my-zsh").exists),
    abort_on_error=False,
)
def install_omz(cfg: Config) -> None:
    subprocess.run(
        'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"',
        stdin=subprocess.DEVNULL,
        check=True,
        shell=True,
    )


@stage(
    "Install pyenv", confirm_before_run=True, predicate=functools.partial(not_, (pathlib.Path.home() / ".pyenv").exists)
)
def install_pyenv(cfg: Config) -> None:
    subprocess.run("curl https://pyenv.run | bash", shell=True, check=True)


@stage("Install fzf", confirm_before_run=True, predicate=functools.partial(not_, (pathlib.Path.home() / ".fzf").exists))
def install_fzf(cfg: Config) -> None:
    subprocess.run(
        ["git", "clone", "--depth", "1", "https://github.com/junegunn/fzf.git", str(pathlib.Path.home() / ".fzf")],
        check=True,
    )
    subprocess.run(["~/.fzf/install"], shell=True, check=True)


@stage("Install VSCode extensions", confirm_before_run=True, abort_on_error=False)
def install_vscode_extensions(cfg: Config) -> None:
    required_extensions = set((THIS_DIR / "vscode-extensions.txt").read_text().splitlines())
    proc = subprocess.run(["code", "--list-extensions"], stdout=subprocess.PIPE, encoding="UTF-8", check=True)
    available_extensions = set(proc.stdout.splitlines())
    extensions_to_install = required_extensions - available_extensions

    if not extensions_to_install:
        _logger.info("No extensions to install")
        return

    args: list[str] = []
    for extension in extensions_to_install:
        args.append("--install-extension")
        args.append(extension)
    try:
        subprocess.run(["code", *args], check=True)
    except:
        _logger.error("Error installing VSCode extensions")
        raise


@stage(
    "Install .zshrc",
    confirm_before_run=True,
    predicate=functools.partial(file_is_not_symlinked, pathlib.Path.home() / ".zshrc", THIS_DIR / ".zshrc"),
)
def install_zshrc(cfg: Config) -> None:
    DotfileManager(cfg.timestamp).safe_symlink(THIS_DIR / ".zshrc", pathlib.Path.home())


def main() -> NoReturn:
    namespace = parser.parse_args()
    configure_logging(namespace.verbose)

    try:
        cfg = Config.from_env(**vars(namespace))
    except Exception as exc:
        parser.exit(status=1, message=f"Error creating configuration: {exc}")

    try:
        configure_gitconfig(cfg)
        configure_gitignore(cfg)
        configure_tmux(cfg)
        configure_pythonstartup(cfg)
        install_omz(cfg)
        install_fzf(cfg)
        install_pyenv(cfg)
        install_vscode_extensions(cfg)
        install_zshrc(cfg)
    except KeyboardInterrupt:
        parser.exit(status=2, message="\nAborted!\n")

    sys.exit(0)


if __name__ == "__main__":
    main()
